import telebot
from telebot.async_telebot import AsyncTeleBot
from telebot import types
import datetime
import asyncio
import aiohttp
import traceback
import pyshorteners
import sqlite3
import random

bot = AsyncTeleBot('')
connect = sqlite3.connect('dz.db', check_same_thread = False)
cursor = connect.cursor()

cursor.execute("""CREATE TABLE IF NOT EXISTS dz(
	predmet TEXT,
	dz TEXT,
	url TEXT,
	files TEXT
	)
""")
connect.commit()

SUBJECTS = ['–∞–ª–≥–µ–±—Ä–∞', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞(–≤–Ω–µ—É—Ä–æ—á–∫–∞)', '–ø–ª–∞–Ω–∏–º–µ—Ç—Ä–∏—è','–±–∏–æ–ª–æ–≥–∏—è', '–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏', '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è', '–≥–µ–æ–º–µ—Ç—Ä–∏—è', '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É(–≤–∏–Ω–æ–≥—Ä–∞–¥–æ–≤–∞)', '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É(—Ü—ã–±–∏–Ω–∞)', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç', '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–≥–∏–ª—å–¥–∏–Ω)', '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–Ω–∏–∑–∞–º–æ–≤–∞)', '–∏—Å—Ç–æ—Ä–∏—è', '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', '–æ–±–∑—Ä', '—Ä–æ–¥–Ω–æ–π —è–∑—ã–∫', '—Ä–æ–¥–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫', '—Ñ–∏–∑–∏–∫–∞', '—Ö–∏–º–∏—è']

RASP = [{'2-3': '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', '4;7': '–≥–µ–æ–º–µ—Ç—Ä–∏—è', '5a-6a': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫(–≤–∏–Ω–æ–≥—Ä–∞–¥–æ–≤–∞)', '5b-6b': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫(—Ü—ã–±–∏–Ω–∞)', '8': '–ø–ª–∞–Ω–∏–º–µ—Ç—Ä–∏—è'}, #–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
		{'1': '–±–∏–æ–ª–æ–≥–∏—è', '2': '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '5': '—Ö–∏–º–∏—è', '6-7': '–∞–ª–≥–µ–±—Ä–∞', '8': '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞(–≤–Ω–µ—É—Ä–æ—á–∫–∞)'}, #–≤—Ç–æ—Ä–Ω–∏–∫
		{'1-2': '–∏—Å—Ç–æ—Ä–∏—è', '3-4': '—Ñ–∏–∑–∏–∫–∞', '5a-6a': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–≥–∏–ª—å–¥–∏–Ω)', '5b-6b': '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞(–Ω–∏–∑–∞–º–æ–≤–∞)', '7': '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫', '8': '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'}, #—Å—Ä–µ–¥–∞
		{'2a': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫(–≤–∏–Ω–æ–≥—Ä–∞–¥–æ–≤–∞)', '2b': '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫(—Ü—ã–±–∏–Ω–∞)', '3-4': '–∞–ª–≥–µ–±—Ä–∞', '5': '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è', '6-7': '—Ñ–∏–∑–∏–∫–∞', '8': '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞(–≤–Ω–µ—É—Ä–æ—á–∫–∞)', '9': '–æ–±–∑—Ä'}, #—á–µ—Ç–≤–µ—Ä–≥
		{'1': '—Ä–æ–¥–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '2': '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫', '3': '–≥–µ–æ–º–µ—Ç—Ä–∏—è', '4': '–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏', '5': '—Ä–æ–¥–Ω–æ–π —è–∑—ã–∫', '6': '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '7': '—Ñ–∏–∑–∏–∫–∞', '8': '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞(–≤–Ω–µ—É—Ä–æ—á–∫–∞)', '9': '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç'} #–ø—è—Ç–Ω–∏—Ü–∞
	]

ADMIN_ID = 0
CHAT_ID = 0
THREAD_ID = 0
CHAT_PUBLIC_ID = 0

login, password = '', ''

DAYS = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
IMAGES = ['https://imgur.com/HHOTR4a.jpg']

@bot.message_handler(commands=['eat'])
async def func12355(message):
	#print('DA')
	if message.from_user.id != ADMIN_ID:
		return
	while True:
		try:
			n = datetime.datetime.now()
			#print(n)
			if n.hour >= 18: #18 utc+3 
				#print('trying...')
				d = datetime.datetime.today().weekday()
				tomorrow = datetime.date.today() + datetime.timedelta(days=1)
				t = f'{tomorrow.day}.{tomorrow.month}.{tomorrow.year}'
				if d in [6, 0, 1, 2, 3]:
					await bot.send_photo(chat_id = CHAT_ID, message_thread_id = THREAD_ID, photo = random.choice(IMAGES), caption = f'<b>‚ùó–û—Ç–º–µ—Ç—å—Ç–µ—Å—å –≤ –°—Ñ–µ—Ä—É–º–µ, –∫—Ç–æ –ø–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ ({DAYS[(d+1) % 7]})</b>\n\n–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–≤—ã–π, –∫—Ç–æ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è, —Å–æ–∑–¥–∞–π—Ç–µ –æ–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:\n\n–¢–µ–º–∞ –æ–ø—Ä–æ—Å–∞: "<code>–ë—É–¥–µ—Ç–µ –ª–∏ –≤—ã –æ–±–µ–¥–∞—Ç—å –∑–∞–≤—Ç—Ä–∞ ({t})?</code>"\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞: "<code>–î–∞</code>" –∏ "<code>–•–æ—á—É —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞</code>".\n–î—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.\n\n<i>P.S. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ –º—ã –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –æ–±–µ–¥–∞–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å.</i>', parse_mode='html')
					await asyncio.sleep(50000)
		except:
			print(traceback.format_exc())
		await asyncio.sleep(20)

@bot.message_handler(commands=['work'])
async def func(message):
	if message.from_user.id != ADMIN_ID:
		return
	while True:
		try:
			n = datetime.datetime.now()
			#print(n)
			if n.hour >= 13 and n.minute >= 30 or n.hour >= 14:
				#print('trying...')
				d = datetime.datetime.today().weekday()
				if d == 4:
					d = -1
				date = '—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å'
				#–ø–æ–∫–∞ —ç–∂ –Ω–µ —Ä–æ–±–∏—Ç
				# s, date = await get_dz(d+2)
				# print(s)
				# try:
				# 	await bot.send_photo(chat_id = CHAT_ID, message_thread_id = THREAD_ID, photo = 'https://imgur.com/m0B8XWn.jpg', caption = f'<strong>üìö–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Å–∏–∏ –≠–ñ</strong> –Ω–∞ {date}\n\n{s}', parse_mode='html')
				# except:
				# 	print(traceback.format_exc())
				# 	await bot.send_message(chat_id = CHAT_ID, message_thread_id = THREAD_ID, text = f'<a href="https://imgur.com/m0B8XWn.jpg">üìö</a><strong>üìö–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Å–∏–∏ –≠–ñ</strong> –Ω–∞ {date}\n\n{s}', parse_mode='html')					
				

				r = RASP[d+1]
				s2 = ''
				flair = "‚úç"
				for k, v in r.items():
					cursor.execute("SELECT * FROM dz WHERE predmet=?", (v,))
					try:
						records = cursor.fetchall()
						dz1 = records[-1][1]
						url = records[-1][2]
						file = records[-1][3]
						if file:
							s2+=f"<ins>{k}.) {v[0].upper()+v[1:]}</ins>: <a href='{url}'>{flair}</a>{dz1};\n<a href='{file}'>üìé–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª</a>\n"							
						else:
							s2+=f"<ins>{k}.) {v[0].upper()+v[1:]}</ins>: <a href='{url}'>{flair}</a>{dz1};\n"
					except:
						#print(traceback.format_exc())
						pass
				try:
					await bot.send_photo(chat_id = CHAT_ID, message_thread_id = THREAD_ID, photo = 'https://imgur.com/tKcrzAD.jpg', caption = f'<strong>üìö–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Å–∏–∏ –≥—Ä—É–ø–ø—ã –î–ó</strong> –Ω–∞ {date}\n\n{s2}', parse_mode='html')
				except:
					print(traceback.format_exc())
					await bot.send_message(chat_id = CHAT_ID, message_thread_id = THREAD_ID, text = f'<a href="https://imgur.com/tKcrzAD.jpg">üìö</a><strong>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Å–∏–∏ –≥—Ä—É–ø–ø—ã –î–ó</strong> –Ω–∞ {date}\n\n{s2}', parse_mode='html')					
				await asyncio.sleep(50000)
		except:
			print(traceback.format_exc())
		await asyncio.sleep(20)

async def get_dz(n):
	async with aiohttp.ClientSession() as session:
		url = 'https://elschool.ru/Logon/Index'
		user_agent_val = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'
		async with session.get(url, headers = {'User-Agent': user_agent_val}, verify_ssl = False) as r:
			session.headers.update({'Referer':url})
			session.headers.update({'User-Agent':user_agent_val})
			_xsrf = None
			async with session.post(url, data={'login': login,'password': password,'_xsrf':_xsrf}) as post_request:
				#print(await post_request.text())
				async with session.get('https://elschool.ru/users/diaries', headers = {'User-Agent': user_agent_val}, verify_ssl = False) as r1:
					session.headers.update({'Referer':url})
					session.headers.update({'User-Agent':user_agent_val})
					s = await r1.text()
					#print(s)
					if n == 1:
						ur = s.split('<div class="navigation__nextweek">')[1].split('<a href="')[1].split('"')[0].replace("&amp;", "&")
						async with session.get(f'https://elschool.ru{ur}', headers = {'User-Agent': user_agent_val}, verify_ssl = False) as r11:
							session.headers.update({'Referer':url})
							session.headers.update({'User-Agent':user_agent_val})
							s = await r11.text()
					s1 = s.split('<tbody>')[1:]
					tbody = s1[n-1]
					s = ''
					s2 = tbody.split('<tr class="diary__lesson">')[1:]
					s22 = s2.copy()
					date = s22[0].split('<td class="diary__dayweek')[1].split('<p>')[1].split('</p>')[0].replace('&nbsp;&nbsp;&nbsp;', ' ')
					#print(len(s2))
					j = 0
					for lesson in s2:
						j+=1
						name = lesson.split('<div class="flex-grow-1">')[1].split('</div>')[0]
						work = lesson.split('<div class="diary__homework-text">')[1].split('</div>')[0].replace("&#167;", "¬ß").replace("&quot;", '"').replace("<", "&lt;").replace(">", "&gt;").replace("&", "&amp;")
						try:
							f = lesson.split('<div class="diary__homework__teacher-file__wrapper">')[1].split('<a href="')[1].split('"')[0]
							#print(f)
							flag_file = True
							async with session.get(f'https://elschool.ru{f}#', headers = {'User-Agent': user_agent_val}, verify_ssl = False) as ft:
								txt = await ft.text()
								ID = txt.split('var Parametrs =')[1].split("?Id=")[1].split('+')[1].split('+')[0].strip().lstrip()
								LESSON_ID = txt.split('var Parametrs =')[1].split("&LessonId=")[1].split('+')[1].split('+')[0].strip().lstrip()
								TITLE = txt.split('var Parametrs =')[1].split("&title=")[1].split('+')[1].split('+')[0].strip().lstrip()
								INS_ID = txt.split('var Parametrs =')[1].split("&InstituteId=")[1].split('+')[1].split('+')[0].strip().lstrip()
								DEP_ID = txt.split('var Parametrs =')[1].split("&DepartmentId=")[1].split('+')[1].split('+')[0].strip().lstrip()
								TOKEN = txt.split('var Parametrs =')[1].split("&token=")[1].split('+')[1].split('+')[0].strip().lstrip()
								TYPE = txt.split('var Parametrs =')[1].split("&Type=")[1].split('+')[1].split(';')[0].strip().lstrip()
								ur = 'https://file.elschool.ru/api/LessonToTeacherFile/' + '?Id=' +  ID + "&LessonId=" + LESSON_ID + "&title=" + TITLE[1:-1] + "&InstituteId=" + INS_ID[1:-1] + "&DepartmentId=" + DEP_ID[1:-1] + "&token=" + TOKEN[1:-1] + "&Type=" + TYPE[1:-1]
								ur_short = pyshorteners.Shortener().clckru.short(ur)
						except:
							flag_file = False
							#print(traceback.format_exc())
						flair = "‚úç"
						if not work:
							work='<em>–î–ó –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</em>'
							flair = ""
						if flag_file:
							s+=f"<ins>{j}.) {name.split('.')[1][1:]}</ins>: {flair}{work};\n<a href='{ur_short}'>üìé–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª</a>\n"
						else:
							s+=f"<ins>{j}.) {name.split('.')[1][1:]}</ins>: {flair}{work};\n"
					return s, date

@bot.message_handler(commands=['id'])
async def id(message):
	print(message.chat.id, message.message_thread_id)
	await bot.reply_to(message, 'done')

@bot.callback_query_handler(lambda call: call.data == 'dz_right')
async def right(call):
	message = call.message.reply_to_message
	predm = await get_predmet(message)
	dz = ':'.join(message.text.split(':')[1:]).strip()
	url = f"https://t.me/c/{CHAT_PUBLIC_ID}/1/{message.message_id}"
	file = ''
	cursor.execute("DELETE FROM dz WHERE predmet=?", (predm,))
	connect.commit()
	cursor.execute("INSERT INTO dz VALUES(?,?,?,?);", [predm, dz, url, file])
	connect.commit()
	await bot.delete_message(call.message.chat.id, call.message.message_id)
	await bot.set_message_reaction(message.chat.id, message.message_id, [types.ReactionTypeEmoji('üëå')])

@bot.callback_query_handler(lambda call: call.data == 'cancel')
async def cancel(call):
	await bot.answer_callback_query(call.id, 'üëå–û—Ç–ø—Ä–∞–≤—å—Ç–µ –î–ó –≤ —á–∞—Ç –µ—â—ë —Ä–∞–∑')
	await bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.message_handler(content_types=["audio", "document", "photo", "sticker", "video", "video_note", "voice", "location", "contact"])
async def document(message):
	if message.reply_to_message and message.reply_to_message.text[0:5].lower() == '–¥–∑ –ø–æ' and message.chat.id in [CHAT_ID]:
		message_dz = message.reply_to_message
		predm = await get_predmet(message_dz)
		dz = ':'.join(message_dz.text.split(':')[1:]).strip()
		url = f"https://t.me/c/{CHAT_PUBLIC_ID}/1/{message_dz.message_id}"
		file = f"https://t.me/c/{CHAT_PUBLIC_ID}/1/{message.message_id}"
		cursor.execute("DELETE FROM dz WHERE predmet=?", (predm,))
		connect.commit()
		cursor.execute("INSERT INTO dz VALUES(?,?,?,?);", [predm, dz, url, file])
		connect.commit()
		await bot.set_message_reaction(message.chat.id, message.message_id, [types.ReactionTypeEmoji('üëå')])

@bot.message_handler(content_types=['text'])
async def dz(message):
	if message.text[0:5].lower() == '–¥–∑ –ø–æ' and int(message.chat.id) in [CHAT_ID]:
		#print('yes')
		predm = await get_predmet(message)
		dz = ':'.join(message.text.split(':')[1:]).strip()
		#cursor.execute("DELETE FROM dz WHERE predm=?", (predm,))
		#connect.commit()
		#cursor.execute("INSERT INTO dz VALUES(?,?);", [predm, dz])
		#connect.commit()
		m = types.InlineKeyboardMarkup()
		m.add(types.InlineKeyboardButton(text='‚úÖ–ó–∞–ø–∏—Å–∞—Ç—å –î–ó', callback_data='dz_right'), types.InlineKeyboardButton(text='‚ùå–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
		await bot.reply_to(message, f'üëÄ–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:\n\n<b>–ü—Ä–µ–¥–º–µ—Ç:</b> <code>{predm}</code>\n<b>–î–ó:</b> <code>{dz}</code>', reply_markup = m, parse_mode='html')

async def get_predmet(message):
	try:
		if message.text[0:5].lower() == '–¥–∑ –ø–æ':
			predm = message.text.split(':')[0][6:].lower()
			t1 = super_ai1(predm)
			t2 = super_ai2(predm)
			res = {}
			h = 1
			for k, v in t1.items():
				try:
					res[k][0] += h
					res[k][1] += v
				except:
					res[k] = [h, v]
				h+=1
			h=1
			for k, v in t2.items():
				try:
					res[k][0] += h
					res[k][1] += v
				except:
					res[k] = [h, v]
				h+=1
			#print(res)
			res = [k for k, v in sorted(res.items(), key=lambda item: item[1][1], reverse=True)]
			#print(res)
			if res[0] == '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É(–≤–∏–Ω–æ–≥—Ä–∞–¥–æ–≤–∞)':
				res[0] = '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫(–≤–∏–Ω–æ–≥—Ä–∞–¥–æ–≤–∞)'
			if res[0] == '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É(—Ü—ã–±–∏–Ω–∞)':
				res[0] = '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫(—Ü—ã–±–∏–Ω–∞)'
			return res[0]
	except:
		print(traceback.format_exc())

def super_ai1(predmet: str):
	try:
		sp = {}
		for i in range(len(predmet)):
			for j in range(len(SUBJECTS)):
				if len(SUBJECTS[j]) > i and predmet[i] == SUBJECTS[j][i]:
					try:
						sp[SUBJECTS[j]] += 10
					except:
						sp[SUBJECTS[j]] = 10
		sp2 = {k: v for k, v in sorted(sp.items(), key=lambda item: item[1], reverse=True)}
		sp = [k for k, v in sorted(sp.items(), key=lambda item: item[1], reverse=True)]
		#print(sp2)
		return sp2
	except:
		print(traceback.format_exc())

def super_ai2(predmet: str):
	pr = []
	pr.extend(predmet)
	try:
		sp = {}
		for i in range(len(SUBJECTS)):
			s = SUBJECTS[i]
			sr = []
			sr.extend(s)
			for j in range(len(predmet)):
				symb = predmet[j]
				a, b = pr.count(symb), sr.count(symb)
				if a == b and len(s) > j and s[j] == symb:
					try:
						sp[s] += a * 10
					except:
						sp[s] = a * 10
				elif len(s) > j and s[j] == symb:
					try:
						sp[s] += 1
					except:
						sp[s] = 1
		sp2 = {k: v for k, v in sorted(sp.items(), key=lambda item: item[1], reverse=True)}
		sp = [k for k, v in sorted(sp.items(), key=lambda item: item[1], reverse=True)]
		#print(sp2)
		return sp2
	except:
		print(traceback.format_exc())


def super_ai11(predmet: str):
	try:
		sp = {}
		for i in range(len(predmet)):
			for j in range(len(SUBJECTS)):
				if len(SUBJECTS[j]) > i and predmet[i] == SUBJECTS[j][i]:
					try:
						sp[SUBJECTS[j]] += 10
					except:
						sp[SUBJECTS[j]] = 10
		sp2 = {k: v for k, v in sorted(sp.items(), key=lambda item: item[1], reverse=True)}
		sp = [k for k, v in sorted(sp.items(), key=lambda item: item[1], reverse=True)]
		#print(sp2)
		return sp
	except:
		print(traceback.format_exc())

def super_ai22(predmet: str):
	pr = []
	pr.extend(predmet)
	try:
		sp = {}
		for i in range(len(SUBJECTS)):
			s = SUBJECTS[i]
			sr = []
			sr.extend(s)
			for j in range(len(predmet)):
				symb = predmet[j]
				a, b = pr.count(symb), sr.count(symb)
				if a == b and len(s) > j and s[j] == symb:
					try:
						sp[s] += a * 10
					except:
						sp[s] = a * 10
				elif len(s) > j and s[j] == symb:
					try:
						sp[s] += 1
					except:
						sp[s] = 1
		sp2 = {k: v for k, v in sorted(sp.items(), key=lambda item: item[1], reverse=True)}
		sp = [k for k, v in sorted(sp.items(), key=lambda item: item[1], reverse=True)]
		#print(sp2)
		return sp
	except:
		print(traceback.format_exc())

asyncio.run(bot.polling(none_stop=True, interval=0))
